/* ---- Creación de tablas ---- */

CREATE TABLE PERSONA (
    DNI                     VARCHAR2(9),
    NOMBRE                  VARCHAR2(50),
    PRIMER_APELLIDO         VARCHAR2(50),
    SEGUNDO_APELLIDO        VARCHAR2(50),
    
    CONSTRAINT PK_PERSONA PRIMARY KEY(DNI)
);

CREATE TABLE PILOTO (
    DNI_PERSONA             VARCHAR2(9),
    NOVEL                   VARCHAR2(2),
    TIPO_CARNET             VARCHAR2(30) NOT NULL,
    
    CONSTRAINT PK_PILOTO PRIMARY KEY(DNI_PERSONA),
    CONSTRAINT FK_PILOTO_PERSONA FOREIGN KEY(DNI_PERSONA) REFERENCES PERSONA(DNI) ON DELETE CASCADE
);

CREATE TABLE AVION (
    ID                      VARCHAR2(30),
    MODELO                  VARCHAR2(30),
    FECHA_MATRICULACION     DATE,
    
    CONSTRAINT PK_AVION PRIMARY KEY(ID)
);

CREATE TABLE PILOTO_PROFESOR(
    DNI_PILOTO_ALUMNO       VARCHAR2(9),
    DNI_PILOTO_PROFESOR     VARCHAR2(9),
    
    CONSTRAINT PK_PILOTO_PROFESOR PRIMARY KEY(DNI_PILOTO_ALUMNO,DNI_PILOTO_PROFESOR),
    CONSTRAINT FK_PILOTO FOREIGN KEY(DNI_PILOTO_ALUMNO) REFERENCES PILOTO(DNI_PERSONA) ON DELETE CASCADE,
    CONSTRAINT FK_PROFESOR FOREIGN KEY(DNI_PILOTO_PROFESOR) REFERENCES PILOTO(DNI_PERSONA) ON DELETE CASCADE
);

CREATE TABLE PILOTO_AVION (
    DNI_PILOTO              VARCHAR2(9),
    ID_AVION                VARCHAR2(30),
    FECHA_VUELO             DATE,
    
    CONSTRAINT PK_PILOTO_AVION PRIMARY KEY(DNI_PILOTO, ID_AVION),
    CONSTRAINT FK_PILOTO_AVION_PILOTO FOREIGN KEY(DNI_PILOTO) REFERENCES PILOTO(DNI_PERSONA) ON DELETE CASCADE,
    CONSTRAINT FK_PILOTO_AVION_AVION FOREIGN KEY(ID_AVION) REFERENCES AVION(ID) ON DELETE CASCADE
);

CREATE TABLE COMERCIAL (
    ID_AVION                VARCHAR2(30),
    NUMERO_DE_PLAZAS        NUMBER(30),
    
    CONSTRAINT PK_COMERCIAL PRIMARY KEY(ID_AVION),
    CONSTRAINT FK_COMERCIAL_AVION FOREIGN KEY(ID_AVION) REFERENCES AVION(ID) ON DELETE CASCADE
);

CREATE TABLE PRIVADO (
    ID_AVION                VARCHAR2(30),
    
    CONSTRAINT PK_PRIVADO PRIMARY KEY(ID_AVION),
    CONSTRAINT FK_PRIVADO_AVION FOREIGN KEY(ID_AVION) REFERENCES AVION(ID) ON DELETE CASCADE
);

CREATE TABLE CAZA (
    ID_AVION                VARCHAR2(30),
    VELOCIDAD_MAXIMA        NUMBER(5),
    
    CONSTRAINT PK_CAZA PRIMARY KEY(ID_AVION),
    CONSTRAINT FK_CAZA_AVION FOREIGN KEY(ID_AVION) REFERENCES AVION(ID) ON DELETE CASCADE,
    CONSTRAINT CK_VELOCIDAD_MAXIMA CHECK(VELOCIDAD_MAXIMA > 0)
);

CREATE TABLE CLIENTE_AVION_PRIVADO (
    DNI_PERSONA             VARCHAR2(9),
    
    CONSTRAINT PK_DNI PRIMARY KEY(DNI_PERSONA),
    CONSTRAINT FK_CLIENTE_AVION_PRIVADO_PERSONA FOREIGN KEY(DNI_PERSONA) REFERENCES PERSONA(DNI)
);

CREATE TABLE VUELO_PRIVADO (
    ID_AVION_PRIVADO        VARCHAR2(30),
    DNI_CLIENTE             VARCHAR2(9),
    FECHA                   DATE,
    PRECIO                  NUMBER(10,2),
    
    CONSTRAINT PK_VUELO_PRIVADO PRIMARY KEY(ID_AVION_PRIVADO, DNI_CLIENTE),
    CONSTRAINT FK_VUELO_PRIVADO_PRIVADO FOREIGN KEY(ID_AVION_PRIVADO) REFERENCES PRIVADO(ID_AVION) ON DELETE CASCADE,
    CONSTRAINT FK_VUELO_PRIVADO_CLIENTE FOREIGN KEY(DNI_CLIENTE) REFERENCES CLIENTE_AVION_PRIVADO(DNI_PERSONA) ON DELETE CASCADE
);

/* ---- Añadimos las restricciones restantes (FK) a la tabla PILOTO ---- */


/* ---- Sentencias DML -> (Insert) ---- */


-- Insertamos las personas

INSERT INTO PERSONA VALUES('47204579H','SALVA','PÉREZ','AGREDANO');
INSERT INTO PERSONA VALUES('97504378H','JOSÉ','GARCÍA','PÉREZ');
INSERT INTO PERSONA VALUES('23423443F','MANUEL','LÓPEZ','LIRA');
INSERT INTO PERSONA VALUES('34535321J','FRAN','GARCÍA','RAMOS');
INSERT INTO PERSONA VALUES('12312312D','MARTA','DÍAZ','EDEN');
INSERT INTO PERSONA VALUES('12321321F','CARLOS','SANTOS','ORTIZ');

-- Insertamos los pilotos

INSERT INTO PILOTO VALUES('97504378H','NO','H2');
INSERT INTO PILOTO VALUES('23423443F','SI','H2');
INSERT INTO PILOTO VALUES('12312312D','NO','H2');

-- Insertamos los pilotos junto a sus profesores

INSERT INTO PILOTO_PROFESOR VALUES('12312312D','97504378H');
INSERT INTO PILOTO_PROFESOR VALUES('23423443F','97504378H');

-- Insertamos los clientes

INSERT INTO CLIENTE_AVION_PRIVADO VALUES('47204579H');
INSERT INTO CLIENTE_AVION_PRIVADO VALUES('34535321J');
INSERT INTO CLIENTE_AVION_PRIVADO VALUES('12321321F');

-- Insertamos los aviones

INSERT INTO AVION VALUES('322','M400',TO_DATE('08/10/2002', 'DD/MM/YYYY'));
INSERT INTO AVION VALUES('321','Z340',TO_DATE('09/11/2012', 'DD/MM/YYYY'));
INSERT INTO AVION VALUES('320','B234',TO_DATE('01/09/2020', 'DD/MM/YYYY'));

INSERT INTO AVION VALUES('319','J123',TO_DATE('08/07/2002', 'DD/MM/YYYY'));
INSERT INTO AVION VALUES('318','I232',TO_DATE('07/08/2015', 'DD/MM/YYYY'));
INSERT INTO AVION VALUES('317','X797',TO_DATE('05/05/2000', 'DD/MM/YYYY'));

-- Insertamos los aviones comerciales como comerciales

INSERT INTO COMERCIAL VALUES('322',200);
INSERT INTO COMERCIAL VALUES('319',300);

-- Insertamos los aviones como privados 

INSERT INTO PRIVADO(ID_AVION) VALUES('320');
INSERT INTO PRIVADO VALUES('318');

-- Insertamos los aviones como caza

INSERT INTO CAZA VALUES('321','250');
INSERT INTO CAZA VALUES('317','230');

-- Insertamos vuelos privados

INSERT INTO VUELO_PRIVADO VALUES('320','47204579H', TO_DATE('12/09/2021','DD/MM/YYYY'), 250.75);
INSERT INTO VUELO_PRIVADO VALUES('318','34535321J', TO_DATE('13/09/2021','DD/MM/YYYY'), 231.00);
INSERT INTO VUELO_PRIVADO VALUES('320','12321321F', TO_DATE('14/09/2021','DD/MM/YYYY'), 456.50);

-- Insertamos los vuelos que han hecho los pilotos

INSERT INTO PILOTO_AVION VALUES('97504378H','320',TO_DATE('12/09/2021','DD/MM/YYYY'));
INSERT INTO PILOTO_AVION VALUES('23423443F','318',TO_DATE('01/10/2021','DD/MM/YYYY'));

-- Grabamos los cambios en la BBDD

COMMIT;


/* ---- Sentencias DML -> (UPDATE) ---- */


-- Sumar un día más a todas las fechas de los vuelos privados

UPDATE VUELO_PRIVADO
SET FECHA = FECHA + 1;

-- Cambio de nombre a una persona que se llama FRAN con DNI 34535321J a FRANCISCO

UPDATE PERSONA
SET NOMBRE = 'FRANCISCO'
WHERE UPPER(NOMBRE) = 'FRAN' AND 
      UPPER(DNI) = '34535321J';
      
-- Establecer los apellidos de la persona con DNI 97504378H en la persona con DNI 47204579H

UPDATE PERSONA
SET (PRIMER_APELLIDO, SEGUNDO_APELLIDO) = (SELECT PRIMER_APELLIDO, SEGUNDO_APELLIDO
                                           FROM PERSONA
                                           WHERE UPPER(DNI) = '97504378H')
WHERE UPPER(DNI) = '47204579H';


/* ---- Sentencias DML -> (DELETE) ---- */


-- Borrar los pilotos que no hayan realizado ningún vuelo

DELETE 
FROM PILOTO 
WHERE UPPER(DNI_persona) NOT IN (SELECT UPPER(DNI_PILOTO)
                                 FROM PILOTO_AVION);
                                 
-- Borrar los vuelos privados de los clientes que hayan pagado más de 400€ 
-- o cuyo día pertenezca a la segunda quincena

DELETE 
FROM VUELO_PRIVADO
WHERE PRECIO > 400 OR EXTRACT(DAY FROM FECHA) >= 15;

-- Volvemos al último commit realizado para restablecer los cambios realizados

ROLLBACK;

/* ---- Sentencias DML -> (SELECT) ---- */

-- Mostrar todas las personas ordenadas por nombre ascendente y primer apellido descendente

SELECT * 
FROM PERSONA
ORDER BY NOMBRE ASC, PRIMER_APELLIDO DESC;

-- Mostrar todas los nombres y primeros apellidos de las personas que son pilotos

SELECT P.NOMBRE NOMBRE, P.PRIMER_APELLIDO APELLIDO
FROM PERSONA P, PILOTO PL
WHERE UPPER(P.DNI) = UPPER(PL.DNI_PERSONA);

-- Mostrar el modelo del caza más rápido

SELECT MODELO
FROM AVION A, CAZA C
WHERE A.ID = C.ID_AVION AND
C.VELOCIDAD_MAXIMA = (SELECT MAX(VELOCIDAD_MAXIMA)
                                 FROM CAZA);

-- Mostrar el numero de asientos totales de los aviones comerciales junto al número más pequeño de asientos en un avión y el máximo

SELECT SUM(NUMERO_DE_PLAZAS) TOTAL_ASIENTOS, MIN(NUMERO_DE_PLAZAS) AVION_CON_MENOS_PLAZAS, MAX(NUMERO_DE_PLAZAS) AVION_CON_MAS_PLAZAS
FROM COMERCIAL;

-- Mostrar número de aviones que son caza

SELECT COUNT(*) NÚMERO_DE_CAZAS
FROM CAZA;

-- Mostrar el nombre los pilotos junto a sus profesores

SELECT ALUMNO.NOMBRE ALUMNO, PROFESOR.NOMBRE PROFESOR
FROM PERSONA ALUMNO, PERSONA PROFESOR, PILOTO_PROFESOR PF
WHERE UPPER(ALUMNO.DNI) = UPPER(PF.DNI_PILOTO_ALUMNO) AND
UPPER(PROFESOR.DNI) = UPPER(DNI_PILOTO_PROFESOR);

-- Mostrar el DNI de los distintos profesores

SELECT DISTINCT DNI_PILOTO_PROFESOR PROFESORES
FROM PILOTO_PROFESOR;

-- Mostrar aquellos carnets los cuales lo posean más de 2 personas

SELECT TIPO_CARNET, COUNT(*) NUMERO_DE_PILOTOS
FROM PILOTO
GROUP BY TIPO_CARNET
HAVING COUNT(*) > 2;

